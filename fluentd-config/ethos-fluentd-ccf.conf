<source>
  @type monitor_agent
  bind 0.0.0.0
  port 24220
</source>

<source>
  @type tcp
  @id input_from_journald_tcp
  @label @mainstream
  port 5170
  format json
  tag systemlog.tcp
</source>

<source>
  @type syslog
  @id input_from_syslog_tcp
  @label @mainstream
  port 5140
  protocol_type tcp
  format syslog
  time_format 1 %Y-%m-%dT%H:%M:%S.%L%z
  tag systemlog.syslog
</source>

<source>
  @type systemd
  @id ingest_from_journald
  @label @mainstream
  path "#{ENV['FLUENTD_SYSTEMD_PATH']}"
  filters "#{ENV['FLUENTD_SYSTEMD_FILTERS']}"
  pos_file "#{ENV['FLUENTD_SYSTEMD_POS_FILE']}"
  read_from_head "#{ENV['FLUENTD_SYSTEMD_READ_FROM_HEAD']}"
  strip_underscores "#{ENV['FLUENTD_SYSTEMD_STRIP_UNDERSCORES']}"
  tag journald
</source>

<source>
  @type tail
  @id ingest_from_tail
  @label @mainstream
  read_from_head true
  path /var/lib/mesos/slave/slaves/**/std*
  exclude_path /var/lib/mesos/slave/slaves/**/std*.*
  pos_file /var/lib/mesos/slave/slaves/fluentd.pos
  format none
  tag systemlog.mesoslog.*
</source>

<label @mainstream>

  # Split out log messages that have a CONTAINER_ID field as potential application logs
  # Drop empty MESSAGEs by setting them to go to the null match
  # Everything else should be treated as a system log.
  <match journald.**>
    @type rewrite_tag_filter
    @id split_docker_stream
    rewriterule1 _TRANSPORT stdout systemlog
    rewriterule2 _TRANSPORT kernel systemlog.kernel
    rewriterule3 CONTAINER_ID \S+ applog
    rewriterule4 _COMM .* systemlog
  </match>

  # Run applog tagged records through the ethos plugin to see if they have the logging metadata in the docker label
  <filter applog>
    @type ethos_filter
    @id get_ethos_metadata
    merge_json_message "#{ENV['FLUENTD_ETHOSPLUGIN_MERGE_JSON']}"
    cache_size "#{ENV['FLUENTD_ETHOSPLUGIN_CACHE_SIZE']}"
    cache_ttl "#{ENV['FLUENTD_ETHOSPLUGIN_CACHE_TTL']}"
    get_container_id_tag "#{ENV['FLUENTD_ETHOSPLUGIN_GET_TAG_FLAG']}"
    container_id_attr "#{ENV['FLUENTD_ETHOSPLUGIN_CONTAINER_FIELD']}"
  </filter>

  # Also, sets the tag based on the logging metadata.  If logging type is splunk, then the low/high volume setting is checked, and
  # the tag becomes a concatenation of the proper Splunk token, the volume setting, and the splunk setting.  Otherwise,
  # set the value to the log type set in the metadata (e.g., sumologic).  Failing that, set the tag to systemlog.
  # Example - applog.splunk.low.<token>, applog.sumologic.custom-source.custom-category.<collector-url>
  <match applog>
    @type record_reformer
    @id set_logging_tag_applog
    enable_ruby true
    tag ${if not record['ETHOS_LOGGING'].nil?; if record['ETHOS_LOGGING']['type'].to_s == "splunk"; record['ETHOS_LOGGING']['attributes']['volume'] == "low" ? ( "applog.splunk.low." + ENV['FLUENTD_SPLUNK_HEC_LVC_TOKEN'].to_s ) : ( "applog.splunk.high." + ENV['FLUENTD_SPLUNK_HEC_TOKEN'].to_s ); elsif record['ETHOS_LOGGING']['type'].to_s == "sumologic"; "applog.sumologic." + record['ETHOS_LOGGING']['attributes']['source_name'].to_s + "." + record['ETHOS_LOGGING']['attributes']['source_category'].to_s + "." + record['ETHOS_LOGGING']['attributes']['collector_url'].to_s; end; else "systemlog"; end}
  </match>

  <filter applog.splunk.**>
    @type record_transformer
    @id format_for_splunk
    enable_ruby true
    renew_record true
    auto_typecast true
    <record>
      timestamp ${(record['_SOURCE_REALTIME_TIMESTAMP'].to_f / 1000000).to_s}
      host "#{ENV['MESOS_CLUSTER']},#{ENV['ethos_role']},#{ENV['zone']},#{ENV['HOST']}"
      index ${record['ETHOS_LOGGING']['attributes']['index']}
      source ${record['CONTAINER_IMAGE']},${record['CONTAINER_NAME']},${record["CONTAINER_ID"]}
      sourcetype ${record['ETHOS_LOGGING']['attributes']['source_type']}
      message ${record['MESSAGE']}
    </record>
  </filter>

  # Same as the above, only for system logs, using the FLUENTD_SYSTEM_LOG_TYPE environment variable.
  <match systemlog>
    @type record_reformer
    @id set_logging_tag_systemlog
    enable_ruby true
    auto_typecast true
    tag ${if not ENV['FLUENTD_SYSTEM_LOG_TYPE'].nil?; if ENV['FLUENTD_SYSTEM_LOG_TYPE'].to_s == "splunk"; ENV['FLUENTD_SYSTEM_LOG_SPLUNK_VOLUME'].to_s == "low" ? ( "systemlog.splunk.low" ) : ( "systemlog.splunk.high" ); elsif ENV['FLUENTD_SYSTEM_LOG_TYPE'].to_s == "sumologic"; "systemlog.sumologic." + ENV['FLUENTD_SYSTEM_LOG_SUMOLOGIC_SOURCENAME'].to_s + "." + ENV['FLUENTD_SYSTEM_LOG_SUMOLOGIC_SOURCECATEGORY'].to_s + "." + ENV['FLUENTD_SYSTEM_LOG_SUMOLOGIC_COLLECTORURL'].to_s; end; else "logging.disabled"; end}
    <record>
      timestamp ${(Time.now.to_f).to_s}
      host "#{ENV['MESOS_CLUSTER']},#{ENV['ethos_role']},#{ENV['zone']},#{ENV['HOST']}"
      source ${record['_SYSTEMD_UNIT']}
      message ${record['MESSAGE'].to_s.gsub(/((?:(?:4\d{3})|(?:5[1-5]\d{2})|6(?:011|5[0-9]{2}))(?:-?|\040?)(?:\d{4}(?:-?|\040?)){3}|(?:3[4,7]\d{2})(?:-?|\040?)\d{6}(?:-?|\040?)\d{5})/, "<POSSIBLE_CREDIT_CARD_NUMBER>").gsub(/\s*-e\s+(?<param>\w+)=(?<value>\S+)/, " -e \\k<param>=xxxxx").gsub(/(?<param>[A-Z_]+)\s*->\s*(?<value>\S+)/, "\\k<param> -> xxxxx").gsub(/EnvironmentVariable\((?<param>[A-Z_]+)\s*\,\s*(?<value>\S+)\)/, "EnvironmentVariable\(\\k<param>,xxxxx\)")}
    </record>
  </match>

  <match systemlog.kernel>
    @type record_reformer
    @id set_logging_tag_systemlog_kernel
    enable_ruby true
    auto_typecast true
    tag ${if not ENV['FLUENTD_SYSTEM_LOG_TYPE'].nil?; if ENV['FLUENTD_SYSTEM_LOG_TYPE'].to_s == "splunk"; ENV['FLUENTD_SYSTEM_LOG_SPLUNK_VOLUME'].to_s == "low" ? ( "systemlog.splunk.low" ) : ( "systemlog.splunk.high" ); elsif ENV['FLUENTD_SYSTEM_LOG_TYPE'].to_s == "sumologic"; "systemlog.sumologic." + ENV['FLUENTD_SYSTEM_LOG_SUMOLOGIC_SOURCENAME'].to_s + "." + ENV['FLUENTD_SYSTEM_LOG_SUMOLOGIC_SOURCECATEGORY'].to_s + "." + ENV['FLUENTD_SYSTEM_LOG_SUMOLOGIC_COLLECTORURL'].to_s; end; else "logging.disabled"; end}
    <record>
      timestamp ${(Time.now.to_f).to_s}
      host "#{ENV['MESOS_CLUSTER']},#{ENV['ethos_role']},#{ENV['zone']},#{ENV['HOST']}"
      source ${record['SYSLOG_IDENTIFIER']}
      message ${record['MESSAGE'].to_s.gsub(/((?:(?:4\d{3})|(?:5[1-5]\d{2})|6(?:011|5[0-9]{2}))(?:-?|\040?)(?:\d{4}(?:-?|\040?)){3}|(?:3[4,7]\d{2})(?:-?|\040?)\d{6}(?:-?|\040?)\d{5})/, "<POSSIBLE_CREDIT_CARD_NUMBER>").gsub(/\s*-e\s+(?<param>\w+)=(?<value>\S+)/, " -e \\k<param>=xxxxx").gsub(/(?<param>[A-Z_]+)\s*->\s*(?<value>\S+)/, "\\k<param> -> xxxxx").gsub(/EnvironmentVariable\((?<param>[A-Z_]+)\s*\,\s*(?<value>\S+)\)/, "EnvironmentVariable\(\\k<param>,xxxxx\)")}
    </record>
  </match>

  # Handle tagging for syslog events, sending them as system logs
  <match systemlog.syslog.**>
    @type record_reformer
    @id set_logging_tag_syslog
    enable_ruby true
    tag ${if not ENV['FLUENTD_SYSTEM_LOG_TYPE'].nil?; if ENV['FLUENTD_SYSTEM_LOG_TYPE'].to_s == "splunk"; ENV['FLUENTD_SYSTEM_LOG_SPLUNK_VOLUME'].to_s == "low" ? ( "systemlog.splunk.low" ) : ( "systemlog.splunk.high" ); elsif ENV['FLUENTD_SYSTEM_LOG_TYPE'].to_s == "sumologic"; "systemlog.sumologic." + ENV['FLUENTD_SYSTEM_LOG_SUMOLOGIC_SOURCENAME'].to_s + "." + ENV['FLUENTD_SYSTEM_LOG_SUMOLOGIC_SOURCECATEGORY'].to_s + "." + ENV['FLUENTD_SYSTEM_LOG_SUMOLOGIC_COLLECTORURL'].to_s; end; else "logging.disabled"; end}
  </match>

  # Handle tagging for Mesos executor logs, sending them as system logs
  <match systemlog.mesoslog.**>
    @type record_reformer
    @id set_logging_tag_mesoslog
    enable_ruby true
    auto_typecast true
    tag ${if not ENV['FLUENTD_MESOS_LOG_TYPE'].nil?; if ENV['FLUENTD_MESOS_LOG_TYPE'].to_s == "splunk"; ENV['FLUENTD_MESOS_LOG_SPLUNK_VOLUME'].to_s == "low" ? ( "mesoslog.splunk.low"  ) : ( "mesoslog.splunk.high" ); elsif ENV['FLUENTD_MESOS_LOG_TYPE'].to_s == "sumologic"; "mesoslog.sumologic." + ENV['FLUENTD_MESOS_LOG_SUMOLOGIC_SOURCENAME'].to_s + "." + ENV['FLUENTD_MESOS_LOG_SUMOLOGIC_SOURCECATEGORY'].to_s + "." + ENV['FLUENTD_MESOS_LOG_SUMOLOGIC_COLLECTORURL'].to_s; end; else "logging.disabled"; end}
    <record>
      timestamp ${(Time.now.to_f).to_s}
      host "#{ENV['MESOS_CLUSTER']},#{ENV['ethos_role']},#{ENV['zone']},#{ENV['HOST']}"
      message ${record['message'].to_s.gsub(/((?:(?:4\d{3})|(?:5[1-5]\d{2})|6(?:011|5[0-9]{2}))(?:-?|\040?)(?:\d{4}(?:-?|\040?)){3}|(?:3[4,7]\d{2})(?:-?|\040?)\d{6}(?:-?|\040?)\d{5})/, "<POSSIBLE_CREDIT_CARD_NUMBER>").gsub(/\s*-e\s+(?<param>\w+)=(?<value>\S+)/, " -e \\k<param>=xxxxx").gsub(/(?<param>[A-Z_]+)\s*->\s*(?<value>\S+)/, "\\k<param> -> xxxxx").gsub(/EnvironmentVariable\((?<param>[A-Z_]+)\s*\,\s*(?<value>\S+)\)/, "EnvironmentVariable\(\\k<param>,xxxxx\)")}
      source ${tag_parts[11]}.${tag_parts[12]}
    </record>
  </match>

  # Discard logs that don't have a sender configured (splunk, sumologic, etc.)
  <match logging.disabled>
    @type null
  </match>

  # Discard all executor logs except for those specific to the ETHOS cluster
  <filter mesoslog.**>
    @type grep
    @id filter_mesos_executor_logs
    regexp1 source (^agentfill|^apigateway|^aqua-agent|^aqua-ethos-setup|^aqua-gateway|^aqua-web|^booster|^capcom|^docker-cleanup|^dsn|^ecr-login|^etcd|^ethos-datadog|^ethos-fluentd|^ethos-splunkforwarder|^feature-flipper-cache|^flight-director|^iam-role-iptables|^iam-role-proxy|^klam-ssh|^sidekick|^skopos)
  </filter>

  # Discard all log records that have an empty or missing message field
  <filter *.splunk.**>
    @type grep
    @id filter_blank_message_lines
    regexp1 message \S+
  </filter>

  <match applog.splunk.high.*>
    @type copy
    <store>
      @type forest
      @id applog_to_splunk
      subtype splunk-http-eventcollector
      <template>
        server "#{ENV['FLUENTD_SPLUNK_HEC_SERVER']}"
        verify "#{ENV['FLUENTD_SPLUNK_HEC_SSL_VERIFY']}"
        token ${tag_parts[3]}
        time_key "#{ENV['FLUENTD_SPLUNK_HEC_TIME_KEY']}"
        all_items "#{ENV['FLUENTD_SPLUNK_HEC_ALL_ITEMS']}"
        post_retry_max "#{ENV['FLUENTD_SPLUNK_HEC_POST_RETRY_MAX']}"
        post_retry_interval "#{ENV['FLUENTD_SPLUNK_HEC_POST_RETRY_INTERVAL']}"
        protocol "#{ENV['FLUENTD_SPLUNK_HEC_PROTOCOL']}"
        batch_size_limit "#{ENV['FLUENTD_SPLUNK_HEC_BATCH_SIZE_LIMIT']}"
        coerce_to_utf8 "#{ENV['FLUENTD_SPLUNK_HEC_COERCE_TO_UTF8']}"
        non_utf8_replacement_string "#{ENV['FLUENTD_SPLUNK_HEC_NON_UTF8_REPLACEMENT_STRING']}"

        buffer_type "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_TYPE']}"
        buffer_path "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_PATH']}/${tag}/"
        buffer_queue_limit "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_QUEUE_LIMIT']}"
        buffer_chunk_limit "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_CHUNK_LIMIT']}"
        flush_interval "#{ENV['FLUENTD_SPLUNK_HEC_FLUSH_INTERVAL']}"
        flush_at_shutdown "#{ENV['FLUENTD_SPLUNK_HEC_FLUSH_AT_SHUTDOWN']}"
        retry_wait "#{ENV['FLUENTD_SPLUNK_HEC_RETRY_WAIT']}"
        max_retry_wait "#{ENV['FLUENTD_SPLUNK_HEC_MAX_RETRY_WAIT']}"
        retry_limit "#{ENV['FLUENTD_SPLUNK_HEC_RETRY_LIMIT']}"
        disable_retry_limit "#{ENV['FLUENTD_SPLUNK_HEC_DISABLE_RETRY_LIMIT']}"
        num_threads "#{ENV['FLUENTD_SPLUNK_HEC_NUM_THREADS']}"

        host ${record["host"]}
        index ${record["index"]}
        source ${record["source"]}
        sourcetype ${record["sourcetype"]}
      </template>
    </store>
    <store>
      @type flowcounter
      @id applog_high_metrics
      tag fluentd.apploghigh.metrics
      aggregate all
      count_keys *
      unit minute
    </store>
  </match>

  <match applog.splunk.low.*>
    @type copy
    <store>
      @type forest
      @id applog_to_lvc_splunk
      subtype splunk-http-eventcollector
      <template>
        server "#{ENV['FLUENTD_SPLUNK_HEC_LVC_SERVER']}"
        verify "#{ENV['FLUENTD_SPLUNK_HEC_LVC_SSL_VERIFY']}"
        token ${tag_parts[3]}
        time_key "#{ENV['FLUENTD_SPLUNK_HEC_TIME_KEY']}"
        all_items "#{ENV['FLUENTD_SPLUNK_HEC_ALL_ITEMS']}"
        post_retry_max "#{ENV['FLUENTD_SPLUNK_HEC_POST_RETRY_MAX']}"
        post_retry_interval "#{ENV['FLUENTD_SPLUNK_HEC_POST_RETRY_INTERVAL']}"
        protocol "#{ENV['FLUENTD_SPLUNK_HEC_PROTOCOL']}"
        batch_size_limit "#{ENV['FLUENTD_SPLUNK_HEC_BATCH_SIZE_LIMIT']}"
        coerce_to_utf8 "#{ENV['FLUENTD_SPLUNK_HEC_COERCE_TO_UTF8']}"
        non_utf8_replacement_string "#{ENV['FLUENTD_SPLUNK_HEC_NON_UTF8_REPLACEMENT_STRING']}"

        buffer_type "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_TYPE']}"
        buffer_path "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_PATH']}/${tag}/"
        buffer_queue_limit "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_QUEUE_LIMIT']}"
        buffer_chunk_limit "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_CHUNK_LIMIT']}"
        flush_interval "#{ENV['FLUENTD_SPLUNK_HEC_FLUSH_INTERVAL']}"
        flush_at_shutdown "#{ENV['FLUENTD_SPLUNK_HEC_FLUSH_AT_SHUTDOWN']}"
        retry_wait "#{ENV['FLUENTD_SPLUNK_HEC_RETRY_WAIT']}"
        max_retry_wait "#{ENV['FLUENTD_SPLUNK_HEC_MAX_RETRY_WAIT']}"
        retry_limit "#{ENV['FLUENTD_SPLUNK_HEC_RETRY_LIMIT']}"
        disable_retry_limit "#{ENV['FLUENTD_SPLUNK_HEC_DISABLE_RETRY_LIMIT']}"
        num_threads "#{ENV['FLUENTD_SPLUNK_HEC_NUM_THREADS']}"

        host ${record["host"]}
        index ${record["index"]}
        source ${record["source"]}
        sourcetype ${record["sourcetype"]}
      </template>
    </store>
    <store>
      @type flowcounter
      @id applog_metrics
      tag fluentd.apploglow.metrics
      aggregate all
      count_keys *
      unit minute
    </store>
  </match>

  <match systemlog.splunk.*>
    @type copy
    <store>
      @type forest
      @id systemlog_to_splunk
      subtype splunk-http-eventcollector
      <template>
        server "#{ENV['FLUENTD_SPLUNK_HEC_SERVER']}"
        verify "#{ENV['FLUENTD_SPLUNK_HEC_SSL_VERIFY']}"
        token "#{ENV['FLUENTD_SPLUNK_HEC_TOKEN']}"
        time_key "#{ENV['FLUENTD_SPLUNK_HEC_TIME_KEY']}"
        all_items "#{ENV['FLUENTD_SPLUNK_HEC_ALL_ITEMS']}"
        post_retry_max "#{ENV['FLUENTD_SPLUNK_HEC_POST_RETRY_MAX']}"
        post_retry_interval "#{ENV['FLUENTD_SPLUNK_HEC_POST_RETRY_INTERVAL']}"
        protocol "#{ENV['FLUENTD_SPLUNK_HEC_PROTOCOL']}"
        batch_size_limit "#{ENV['FLUENTD_SPLUNK_HEC_BATCH_SIZE_LIMIT']}"
        coerce_to_utf8 "#{ENV['FLUENTD_SPLUNK_HEC_COERCE_TO_UTF8']}"
        non_utf8_replacement_string "#{ENV['FLUENTD_SPLUNK_HEC_NON_UTF8_REPLACEMENT_STRING']}"

        buffer_type "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_TYPE']}"
        buffer_path "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_PATH']}/${tag}/"
        buffer_queue_limit "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_QUEUE_LIMIT']}"
        buffer_chunk_limit "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_CHUNK_LIMIT']}"
        flush_interval "#{ENV['FLUENTD_SPLUNK_HEC_FLUSH_INTERVAL']}"
        flush_at_shutdown "#{ENV['FLUENTD_SPLUNK_HEC_FLUSH_AT_SHUTDOWN']}"
        retry_wait "#{ENV['FLUENTD_SPLUNK_HEC_RETRY_WAIT']}"
        max_retry_wait "#{ENV['FLUENTD_SPLUNK_HEC_MAX_RETRY_WAIT']}"
        retry_limit "#{ENV['FLUENTD_SPLUNK_HEC_RETRY_LIMIT']}"
        disable_retry_limit "#{ENV['FLUENTD_SPLUNK_HEC_DISABLE_RETRY_LIMIT']}"
        num_threads "#{ENV['FLUENTD_SPLUNK_HEC_NUM_THREADS']}"

        host ${record["host"]}
        index "#{ENV['FLUENTD_SYSTEM_LOG_SPLUNK_INDEX']}"
        source ${record["source"]}
        sourcetype "#{ENV['FLUENTD_SYSTEM_LOG_SPLUNK_SOURCETYPE']}"
      </template>
    </store>
    <store>
      @type flowcounter
      @id systemlog_metrics
      tag fluentd.systemlog.metrics
      aggregate all
      count_keys message
      unit minute
    </store>
    <store>
      @type rewrite_tag_filter
      rewriterule1 message .+ splunkes.${tag}
    </store>
  </match>

  <match mesoslog.splunk.*>
    @type copy
    <store>
      @type forest
      @id mesoslog_to_splunk
      subtype splunk-http-eventcollector
      <template>
        server "#{ENV['FLUENTD_SPLUNK_HEC_SERVER']}"
        verify "#{ENV['FLUENTD_SPLUNK_HEC_SSL_VERIFY']}"
        token "#{ENV['FLUENTD_SPLUNK_HEC_TOKEN']}"
        time_key "#{ENV['FLUENTD_SPLUNK_HEC_TIME_KEY']}"
        all_items "#{ENV['FLUENTD_SPLUNK_HEC_ALL_ITEMS']}"
        post_retry_max "#{ENV['FLUENTD_SPLUNK_HEC_POST_RETRY_MAX']}"
        post_retry_interval "#{ENV['FLUENTD_SPLUNK_HEC_POST_RETRY_INTERVAL']}"
        protocol "#{ENV['FLUENTD_SPLUNK_HEC_PROTOCOL']}"
        batch_size_limit "#{ENV['FLUENTD_SPLUNK_HEC_BATCH_SIZE_LIMIT']}"
        coerce_to_utf8 "#{ENV['FLUENTD_SPLUNK_HEC_COERCE_TO_UTF8']}"
        non_utf8_replacement_string "#{ENV['FLUENTD_SPLUNK_HEC_NON_UTF8_REPLACEMENT_STRING']}"

        buffer_type "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_TYPE']}"
        buffer_path "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_PATH']}/${tag}/"
        buffer_queue_limit "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_QUEUE_LIMIT']}"
        buffer_chunk_limit "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_CHUNK_LIMIT']}"
        flush_interval "#{ENV['FLUENTD_SPLUNK_HEC_FLUSH_INTERVAL']}"
        flush_at_shutdown "#{ENV['FLUENTD_SPLUNK_HEC_FLUSH_AT_SHUTDOWN']}"
        retry_wait "#{ENV['FLUENTD_SPLUNK_HEC_RETRY_WAIT']}"
        max_retry_wait "#{ENV['FLUENTD_SPLUNK_HEC_MAX_RETRY_WAIT']}"
        retry_limit "#{ENV['FLUENTD_SPLUNK_HEC_RETRY_LIMIT']}"
        disable_retry_limit "#{ENV['FLUENTD_SPLUNK_HEC_DISABLE_RETRY_LIMIT']}"
        num_threads "#{ENV['FLUENTD_SPLUNK_HEC_NUM_THREADS']}"

        host ${record["host"]}
        index "#{ENV['FLUENTD_MESOS_LOG_SPLUNK_INDEX']}"
        source ${record["source"]}
        sourcetype "#{ENV['FLUENTD_MESOS_LOG_SPLUNK_SOURCETYPE']}"
      </template>
    </store>
    <store>
      @type flowcounter
      @id mesoslog_metrics
      tag fluentd.mesoslog.metrics
      aggregate all
      count_keys message
      unit minute
    </store>
    <store>
      @type rewrite_tag_filter
      rewriterule1 message .+ splunkes.${tag}
    </store>
  </match>

  <match splunkes.**>
    @type copy
    <store>
      @type forest
      @id systemlog_to_splunkes
      subtype splunk-http-eventcollector
      <template>
        server "#{ENV['FLUENTD_SPLUNKES_HEC_SERVER']}"
        verify "#{ENV['FLUENTD_SPLUNKES_HEC_SSL_VERIFY']}"
        token "#{ENV['FLUENTD_SPLUNKES_HEC_TOKEN']}"
        time_key "#{ENV['FLUENTD_SPLUNK_HEC_TIME_KEY']}"
        all_items "#{ENV['FLUENTD_SPLUNK_HEC_ALL_ITEMS']}"
        post_retry_max "#{ENV['FLUENTD_SPLUNK_HEC_POST_RETRY_MAX']}"
        post_retry_interval "#{ENV['FLUENTD_SPLUNK_HEC_POST_RETRY_INTERVAL']}"
        protocol "#{ENV['FLUENTD_SPLUNKES_HEC_PROTOCOL']}"
        batch_size_limit "#{ENV['FLUENTD_SPLUNK_HEC_BATCH_SIZE_LIMIT']}"
        coerce_to_utf8 "#{ENV['FLUENTD_SPLUNK_HEC_COERCE_TO_UTF8']}"
        non_utf8_replacement_string "#{ENV['FLUENTD_SPLUNK_HEC_NON_UTF8_REPLACEMENT_STRING']}"

        buffer_type "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_TYPE']}"
        buffer_path "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_PATH']}/${tag}/"
        buffer_queue_limit "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_QUEUE_LIMIT']}"
        buffer_chunk_limit "#{ENV['FLUENTD_SPLUNK_HEC_BUFFER_CHUNK_LIMIT']}"
        flush_interval "#{ENV['FLUENTD_SPLUNK_HEC_FLUSH_INTERVAL']}"
        flush_at_shutdown "#{ENV['FLUENTD_SPLUNK_HEC_FLUSH_AT_SHUTDOWN']}"
        retry_wait "#{ENV['FLUENTD_SPLUNK_HEC_RETRY_WAIT']}"
        max_retry_wait "#{ENV['FLUENTD_SPLUNK_HEC_MAX_RETRY_WAIT']}"
        retry_limit "#{ENV['FLUENTD_SPLUNK_HEC_RETRY_LIMIT']}"
        disable_retry_limit "#{ENV['FLUENTD_SPLUNK_HEC_DISABLE_RETRY_LIMIT']}"
        num_threads "#{ENV['FLUENTD_SPLUNK_HEC_NUM_THREADS']}"

        host ${record["host"]}
        index "#{ENV['FLUENTD_SYSTEM_LOG_SPLUNKES_INDEX']}"
        source ${record["source"]}
        sourcetype "#{ENV['FLUENTD_SYSTEM_LOG_SPLUNKES_SOURCETYPE']}"
      </template>
    </store>
    <store>
      @type flowcounter
      @id systemloges_metrics
      tag fluentd.splunkes.metrics
      aggregate all
      count_keys message
      unit minute
    </store>
  </match>

  <match fluentd.*.metrics>
    @type stdout
  </match>

</label>
